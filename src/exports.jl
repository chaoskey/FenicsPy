mshrfunc = []
mshrclass = []

fenicsfunc = []
fenicsclass = []

uflfunc = []
uflclass = []

export dx, ds, dS, dP

array(matrix) = matrix.gather_on_zero()
export array

push!(fenicsfunc, :as_vector)
export as_vector

############################################
#
#    dolfin.cpp.function
# https://fenicsproject.org/docs/dolfin/2018.1.0/python/_autogenerated/dolfin.cpp.function.html   
#
#    dolfin.function
# https://fenicsproject.org/docs/dolfin/2017.2.0/python/programmers-reference/functions/index.html
#
############################################

#import Base: Function  # must be explicitly imported to be extended

push!(fenicsclass, [:Constant, :Expression, [:Function, :FeFunction], :FunctionSpace])
push!(fenicsfunc, [:interpolate, :VectorFunctionSpace, :TrialFunction, :TestFunction, :FacetNormal])
export Constant, Expression, FeFunction, FunctionSpace, interpolate, VectorFunctionSpace, TrialFunction, TestFunction, FacetNormal

############################################
#
#    dolfin.mesh
#    dolfin.cpp.mesh module
#
# https://fenicsproject.org/docs/dolfin/2018.1.0/python/_autogenerated/dolfin.cpp.mesh.html
# https://fenicsproject.org/docs/dolfin/2017.2.0/python/programmers-reference/cpp/mesh/index.html
#
############################################

push!(fenicsclass, [:Mesh, :MeshFunction])
export Mesh, MeshFunction

############################################
#
#    dolfin.cpp.generation
#
# https://fenicsproject.org/docs/dolfin/2018.1.0/python/_autogenerated/dolfin.cpp.generation.html
#
############################################

push!(fenicsclass, [:BoxMesh, :RectangleMesh, :UnitSquareMesh])
export BoxMesh, RectangleMesh, UnitSquareMesh

############################################
#
#    dolfin.cpp.fem
# https://fenicsproject.org/docs/dolfin/2018.1.0/python/_autogenerated/dolfin.cpp.fem.html
#
#    dolfin.fem module
# https://fenicsproject.org/docs/dolfin/2017.2.0/python/programmers-reference/fem/index.html
#
############################################
push!(fenicsclass, [:DirichletBC, :AutoSubDomain])
push!(fenicsfunc, [:assemble, :split, :errornorm, :project, :solve])
export DirichletBC, AutoSubDomain, assemble, split, errornorm, project, solve

############################################
#
#    dolfin.cpp.geometry
#
# https://fenicsproject.org/docs/dolfin/2018.1.0/python/_autogenerated/dolfin.cpp.geometry.html
#
############################################

push!(fenicsclass, :Point)
export Point

############################################
#
#    dolfin.common
#
# https://fenicsproject.org/docs/dolfin/2017.2.0/python/programmers-reference/common/index.html
#
############################################

push!(fenicsfunc, :plot)
export plot


############################################
#    ufi      https://fenicsproject.org/pub/documents/ufl/ufl-user-manual/ufl-user-manual.pdf
############################################

push!(fenicsclass, [:FiniteElement, :MixedElement])
export FiniteElement, MixedElement

#import Base: div, sqrt  # must be explicitly imported to be extended

push!(fenicsclass, [:Measure, :Identity])
push!(fenicsfunc, [:div, :grad, :nabla_grad, :dot, :tr, :sqrt, :inner, :sym, :lhs, :rhs])
push!(uflfunc, :nabla_div)
export Measure, Identity, div, nabla_div, grad, nabla_grad, dot, tr, sqrt, inner, sym, lhs, rhs

############################################
#    mshr
############################################

push!(mshrclass, [:Rectangle, :Circle])
push!(mshrfunc, [:generate_mesh])
export Rectangle, Circle, generate_mesh

############################################
#
#    dolfin.cpp.io module
#
# https://fenicsproject.org/docs/dolfin/2018.1.0/python/_autogenerated/dolfin.cpp.io.html
#
############################################

push!(fenicsclass, [:File, :XDMFFile])
export File, XDMFFile


############################################
#
#    dolfin.cpp.adaptivity
#
# https://fenicsproject.org/docs/dolfin/2018.1.0/python/_autogenerated/dolfin.cpp.adaptivity.html?highlight=timeseries#dolfin.cpp.adaptivity.TimeSeries
#
############################################

push!(fenicsclass, [:TimeSeries])
export TimeSeries

fenicsclass = vcat(fenicsclass...)
fenicsfunc = vcat(fenicsfunc...)
mshrclass = vcat(mshrclass...)
mshrfunc = vcat(mshrfunc...)
uflclass = vcat(uflclass...)
uflfunc = vcat(uflfunc...)

