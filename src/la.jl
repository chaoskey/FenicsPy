############################################
#
#    dolfin.cpp.la
# https://fenicsproject.org/docs/dolfin/2017.2.0/python/programmers-reference/cpp/la/index.html
#
#    dolfin.la
# https://fenicsproject.org/docs/dolfin/latest/python/_autogenerated/dolfin.la.html
#
############################################

# 这两个类，没有从`dolfin`中导出，所以本库也不导出。 仅用作父类而存在。
@pyclass dolfin GenericTensor          # Bases: dolfin.cpp.la.LinearAlgebraObject
@pyclass dolfin GenericMatrix GenericTensor

@pyclass dolfin Scalar GenericTensor
@pyclass dolfin GenericVector GenericTensor
@pyclass dolfin EigenVector GenericVector
@pyclass dolfin PETScVector GenericVector
@pyclass dolfin Vector GenericVector FeVector
@pyclass dolfin EigenMatrix GenericMatrix
@pyclass dolfin PETScMatrix GenericMatrix
@pyclass dolfin Matrix GenericMatrix FeMatrix
@pyclass dolfin BlockMatrix            # Bases: object
@pyclass dolfin BlockVector            # Bases: object
@pyclass dolfin IndexMap               # Bases: object
@pyclass dolfin KrylovSolver           # Bases: dolfin.cpp.la.GenericLinearSolver
@pyclass dolfin LUSolver               # Bases: dolfin.cpp.la.GenericLinearSolver
@pyclass dolfin DefaultFactory         # Bases: dolfin.cpp.la.GenericLinearAlgebraFactory
@pyclass dolfin EigenFactory           # Bases: dolfin.cpp.la.GenericLinearAlgebraFactory
@pyclass dolfin LinearOperator         # Bases: dolfin.cpp.la.LinearAlgebraObject
@pyclass dolfin TensorLayout           # Bases: dolfin.cpp.common.Variable
@pyclass dolfin VectorSpaceBasis       # Bases: object
@pyclass dolfin NewtonSolver           # Bases: dolfin.cpp.common.Variable
@pyclass dolfin NonlinearProblem       # Bases: object
@pyclass dolfin OptimisationProblem NonlinearProblem
@pyclass dolfin SLEPcEigenSolver       # Bases: dolfin.cpp.common.Variable, dolfin.cpp.la.PETScObject
@pyclass dolfin PETScLUSolver          # Bases: dolfin.cpp.la.GenericLUSolver, dolfin.cpp.la.PETScObject
@pyclass dolfin PETScKrylovSolver      # Bases: dolfin.cpp.la.GenericLinearSolver, dolfin.cpp.la.PETScObject

@pyfunc ufl as_tensor
@pyfunc ufl as_vector
@pyfunc ufl as_matrix

@pyfunc dolfin list_lu_solver_methods
@pyfunc dolfin list_linear_solver_methods
@pyfunc dolfin lu_solver_methods
@pyfunc dolfin linear_solver_methods
@pyfunc dolfin list_linear_algebra_backends
@pyfunc dolfin has_linear_algebra_backend
@pyfunc dolfin list_krylov_solver_methods
@pyfunc dolfin list_krylov_solver_preconditioners
@pyfunc dolfin has_krylov_solver_method
@pyfunc dolfin has_krylov_solver_preconditioner

@pyfunc dolfin as_backend_type
@pyfunc dolfin la_index_dtype
@pyfunc dolfin normalize
@pyfunc dolfin residual

list_lu_solver_methods, list_linear_solver_methods, lu_solver_methods, linear_solver_methods,
list_krylov_solver_methods, list_krylov_solver_preconditioners, normalize,residual

*(v::GenericTensor, c::Real) = to_fetype(v.pyobject * c)
*(c::Real, v::GenericTensor) = to_fetype(c * v.pyobject)

+(v1::GenericVector, v2::GenericVector) = to_fetype(v1.pyobject + v2.pyobject)

-(v1::GenericVector, v2::GenericVector) = to_fetype(v1.pyobject - v2.pyobject)
-(v::GenericTensor) = to_fetype( (-1) * v.pyobject)

/(v::GenericTensor, c::Real) = to_fetype(v.pyobject / c)

function Base.lastindex(o::GenericVector)
    o.pyobject.size()
end

Base.getindex(o::GenericVector, idx::Union{Array{Int},UnitRange{Int}}) = to_fetype(o.pyobject.get_local(idx .- 1))
Base.getindex(o::GenericVector, idx::Colon) = o[1:end]

function Base.setindex!(o::GenericVector, values::Union{GenericVector,Array}, idx::Union{Array{Int},UnitRange{Int}})
    if isa(values,GenericVector)
        o.pyobject.set_local(values.pyobject)
    else
        cp = o.pyobject.get_local()
        cp[idx] = values
        o.pyobject.set_local(cp)
    end
end
function Base.setindex!(o::GenericVector, values::Union{GenericVector,Array}, idx::Colon)
    o[1:end] = values
end

export Scalar, GenericVector, EigenVector, PETScVector, FeVector, EigenMatrix, PETScMatrix, FeMatrix, 
       BlockMatrix, BlockVector, IndexMap, KrylovSolver, LUSolver, DefaultFactory, EigenFactory, 
       LinearOperator, TensorLayout, VectorSpaceBasis, NewtonSolver, NonlinearProblem, 
       OptimisationProblem, SLEPcEigenSolver, PETScLUSolver, PETScKrylovSolver, as_tensor, as_vector, 
       as_matrix, list_lu_solver_methods, list_linear_solver_methods, lu_solver_methods, 
       linear_solver_methods, list_linear_algebra_backends, has_linear_algebra_backend, 
       has_krylov_solver_method,has_krylov_solver_preconditioner, list_krylov_solver_methods, 
       as_backend_type, la_index_dtype, list_krylov_solver_preconditioners, normalize,residual


